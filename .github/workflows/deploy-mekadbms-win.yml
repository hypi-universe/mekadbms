permissions:
  contents: write
  packages: write
on:
  push:
    branches:
      - main
    #    - feature/vitess
    paths-ignore:
      - clients/**
  pull_request:
  workflow_dispatch:
env:
  REGISTRY_IMAGE: hypi/mekadbms

# If new code is pushed to a PR branch, then cancel in progress workflows for that PR.
# Ensures that we don't waste CI time, and returns results quicker
# https://github.com/jonhoo/rust-ci-conf/pull/5
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

name: mekadbms - windows
jobs:
  build:
    name: ${{ matrix.platform.os_name }} with rust ${{ matrix.toolchain }}
    runs-on: ${{ matrix.platform.os }}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        platform:
          #todo windows ARM support
          - os_name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: mekadbms-amd64.exe
            docker_target: windows/amd64
            command: both
        toolchain:
          - stable
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.CROSS_REPO_TOKEN }}
      #Configure git to auth with the cross repo PAT
      - run: git config --global url."https://${{ secrets.CROSS_REPO_TOKEN }}@github.com".insteadOf ssh://git@github.com

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: type=raw,value={{branch}}-{{sha}}

      - uses: Swatinem/rust-cache@v2

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          version: "25.x"

      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          targets: ${{ matrix.platform.target }}

      - name: cargo generate-lockfile
        # enable this ci template to run regardless of whether the lockfile is checked in or not
        if: hashFiles('Cargo.lock') == ''
        working-directory: mekadb
        run: cargo generate-lockfile

        #Use rustup target list to get full list of rust targets
        #docker:26.1.3-dind is available for amd64,arm64,arm/v6,arm/v7
        #See for linker export https://github.com/rust-lang/rust/issues/28924#issuecomment-580828030
      - name: build (windows)
        if: matrix.platform.os_name == 'Windows-x86_64'
        working-directory: mekadb
        run: |
          rustup toolchain install ${{ matrix.toolchain }}-${{ matrix.platform.target }}
          rustup show
          cargo build --release --package mekadbms --target ${{ matrix.platform.target }}

      - name: Rename binary (windows)
        working-directory: mekadb
        run: mv target/${{ matrix.platform.target }}/release/mekadbms.exe target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
        if: matrix.platform.os_name == 'Windows-x86_64'

      - name: Generate SHA-256
        working-directory: mekadb
        run: shasum -a 256 target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }} | cut -d ' ' -f 1 > target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}.sha256

#      - name: Release binary and SHA-256 checksum to GitHub
#        uses: softprops/action-gh-release@v1
#        with:
#          tag_name: ${{ steps.params.outputs.mekadbTag }}
#          token: ${{ secrets.GITHUB_TOKEN }}
#          files: |
#            target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
#            target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}.sha256

      - name: Generate Dockerfile
        working-directory: mekadb
        run: |
          (Get-Content ./mekadbms/Dockerfile.win).Replace('mekadbmsbin', 'target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}') | Set-Content ./mekadbms/Dockerfile.win
          Get-Content ./mekadbms/Dockerfile.win

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push mekadb image
        id: docker_build_mekadb
        working-directory: mekadb
        run: |
          docker build . --platform ${{ matrix.platform.docker_target }} --label ${{ steps.meta.outputs.labels }} -f mekadbms/dockerfile.win -t hypi/${{ steps.meta.outputs.tags }}
          docker push hypi/${{ steps.meta.outputs.tags }}
