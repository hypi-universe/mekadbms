permissions:
  contents: write
  packages: write
on:
  workflow_run:
    workflows:
      - mekadbms - build - bin
    branches: [main]
    types:
      - completed
  workflow_dispatch:
    inputs:
      commit:
        type: string
        description: The commit that produced the release this workflow should run on
      release:
        type: string
        description: The Github release that was created
env:
  REGISTRY_IMAGE: hypi/mekadbms

# If new code is pushed to a PR branch, then cancel in progress workflows for that PR.
# Ensures that we don't waste CI time, and returns results quicker
# https://github.com/jonhoo/rust-ci-conf/pull/5
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: false

name: mekadbms - build - docker
jobs:
  build_docker_images:
    name: ${{ matrix.platform.os_name }} with rust ${{ matrix.toolchain }}
    runs-on: ${{ matrix.platform.os }}
    if: ${{ github.event.workflow_run.conclusion == 'success' || inputs.commit}}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os_name: Linux-aarch64
            os: ubuntu-latest
            #hf = hard float i.e. where the CPU includes floating point support
            target: aarch64-unknown-linux-gnu
            docker_target: linux/arm64
            bin: mekadbms-linux-arm64
            arch: linux-aarch64
            command: build
          - os_name: Linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            #            target: x86_64-unknown-linux-musl
            docker_target: linux/amd64
            bin: mekadbms-linux-amd64
            arch: linux-amd64
            command: build
          - os_name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: mekadbms-amd64.exe
            docker_target: windows/amd64
            arch: windows-amd64
            command: both
          #https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
          - os_name: macOS-x86_64
            #13 is intel/x86
            #os: macos-13
            os: ubuntu-latest
            target: x86_64-apple-darwin
            docker_target: linux/amd64
            bin: mekadbms-darwin-amd64
            arch: mac-amd64
            command: both
          - os_name: macOS-aarch64
            #macos-14 is arm64/M1
            #os: macOS-14
            os: ubuntu-latest
            target: aarch64-apple-darwin
            docker_target: linux/arm64
            bin: mekadbms-darwin-arm64
            arch: mac-aarch64
            command: both
        toolchain:
          - stable
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.CROSS_REPO_TOKEN }}
          #defaults to '' if inputs.commit is not set (when triggered automatically)
          ref: ${{ inputs.commit }}
      #Configure git to auth with the cross repo PAT
      - run: git config --global url."https://${{ secrets.CROSS_REPO_TOKEN }}@github.com".insteadOf ssh://git@github.com
      #      - run: git config --global url."https://${{ secrets.CROSS_REPO_TOKEN }}@github.com".insteadOf https://github.com

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: type=raw,value={{branch}}-{{sha}}

      - name: Determine release
        if: matrix.platform.os_name != 'Windows-x86_64'
        run: |
          set -e
          set -o xtrace
          version="${{ inputs.release }}"
          if [ ! -z "$version" -a "$version" != " " ]; then
            echo "Release is present in inputs as $version"
          else
            version="${{ steps.meta.outputs.version }}"
            echo "Release is NOT present in inputs so used meta generated version of $version"
          fi
    
          echo "version=$(echo ${version})" >> $GITHUB_ENV

      - name: Determine release
        if: matrix.platform.os_name == 'Windows-x86_64'
        run: |
          Set-Variable -Name "version" -Value "${{ inputs.release }}"
          if ($version) { 
            echo "Release is present in inputs as $version" 
          } else { 
            Set-Variable -Name "version" -Value "${{ steps.meta.outputs.version }}"
            echo "Release is NOT present in inputs so used meta generated version of $version"
          }
          Add-Content -Path $env:GITHUB_ENV -Value "version=$version"

      - name: Download binary from GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #  is wrong when triggered manually
        #Removed from after the `download` argument for now so it always runs on the latest release
        run: >-
          mkdir -p mekadb/target/${{ matrix.platform.target }}/release;
          gh release download ${{ env.version }} 
          --dir mekadb/target/${{ matrix.platform.target }}/release 
          --pattern "${{ matrix.platform.bin }}" 
          --clobber;
          ls mekadb/target/${{ matrix.platform.target }}/release

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate Dockerfile - windows
        if: matrix.platform.os_name == 'Windows-x86_64'
        working-directory: mekadb
        run: |
          (Get-Content ./mekadbms/Dockerfile.win).Replace('mekadbmsbin', 'target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}') | Set-Content ./mekadbms/Dockerfile.win
          Get-Content ./mekadbms/Dockerfile.win

      - name: Build and push mekadb image - windows
        if: matrix.platform.os_name == 'Windows-x86_64'
        working-directory: mekadb
        run: |
          docker build . --platform ${{ matrix.platform.docker_target }} -f mekadbms/dockerfile.win -t hypi/mekadbms:${{ env.version }}-${{ matrix.platform.arch }}
          docker push hypi/mekadbms:${{ env.version }}-${{ matrix.platform.arch }}

      - name: Generate Dockerfile - x86
        if: contains(matrix.platform.os_name, 'x86_64') && matrix.platform.os_name != 'Windows-x86_64'
        working-directory: mekadb
        run: |
          sed -i -e 's#FROM_FLAG#--platform=linux/amd64#g' ./mekadbms/Dockerfile
          sed -i -e 's#mekadbmsbin#target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}#g' ./mekadbms/Dockerfile
          cat ./mekadbms/Dockerfile

      - name: Generate Dockerfile - ARM64
        if: contains(matrix.platform.os_name, 'aarch64') && matrix.platform.os_name != 'Windows-x86_64'
        working-directory: mekadb
        run: |
          sed -i -e 's#FROM_FLAG#--platform=linux/arm64#g' ./mekadbms/Dockerfile
          cmds="#RUN apk add gcompat" && \
          sed -i -e "s/#RUN_COMMANDS_HERE/$cmds/g" ./mekadbms/Dockerfile && \
          sed -i -e 's#mekadbmsbin#target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}#g' ./mekadbms/Dockerfile && \
          cat ./mekadbms/Dockerfile

      - name: Build and push mekadb image - linux/mac
        if: matrix.platform.os_name != 'Windows-x86_64'
        working-directory: mekadb
        run: |
          docker build . --platform ${{ matrix.platform.docker_target }} -f mekadbms/Dockerfile -t hypi/mekadbms:${{ env.version }}-${{ matrix.platform.arch }}
          docker push hypi/mekadbms:${{ env.version }}-${{ matrix.platform.arch }}

#      - name: Tag and push
#        run: |
#          git config --global user.email "github-action@hypi.io"
#          git config --global user.name "Hypi Github Action"
#          git tag ${{ steps.meta.outputs.version }}
#          git pull origin $(git rev-parse --abbrev-ref HEAD)
#          git push origin $(git rev-parse --abbrev-ref HEAD)
#          git push origin --tags
