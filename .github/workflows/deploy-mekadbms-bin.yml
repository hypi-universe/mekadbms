permissions:
  contents: write
  packages: write
on:
  workflow_run:
    workflows:
      - mekadbms - create draft release
    branches: [main]
    types:
      - completed
  workflow_dispatch:
#on:
#  push:
#    branches:
#      - main
#    #    - feature/vitess
#    paths-ignore:
#      - clients/**
#  pull_request:
#  workflow_dispatch:
env:
  REGISTRY_IMAGE: hypi/mekadbms

# If new code is pushed to a PR branch, then cancel in progress workflows for that PR.
# Ensures that we don't waste CI time, and returns results quicker
# https://github.com/jonhoo/rust-ci-conf/pull/5
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: false

name: mekadbms - build - bin
jobs:
  build:
    name: ${{ matrix.platform.os_name }} with rust ${{ matrix.toolchain }}
    runs-on: ${{ matrix.platform.os }}
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    #if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os_name: Linux-aarch64
            os: ubuntu-latest
#            target: aarch64-unknown-linux-musl
            #hf = hard float i.e. where the CPU includes floating point support
            target: arm-unknown-linux-gnueabihf
            docker_target: linux/arm64
            bin: mekadbms-linux-arm64
            command: build
          - os_name: Linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
#            target: x86_64-unknown-linux-musl
            docker_target: linux/amd64
            bin: mekadbms-linux-amd64
            command: build
#          - os_name: Windows-x86_64
#            os: windows-latest
#            target: x86_64-pc-windows-msvc
#            bin: mekadbms-amd64.exe
#            docker_target: windows/amd64
#            command: both
        #https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
          - os_name: macOS-x86_64
            #13 is intel/x86
            os: macos-13
            target: x86_64-apple-darwin
            docker_target: linux/amd64
            bin: mekadbms-darwin-amd64
            command: both
          - os_name: macOS-aarch64
            #macos-14 is arm64/M1
            os: macOS-14
            target: aarch64-apple-darwin
            docker_target: linux/arm64
            bin: mekadbms-darwin-arm64
            command: both
        toolchain:
          - stable
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.CROSS_REPO_TOKEN }}
      #Configure git to auth with the cross repo PAT
      - run: git config --global url."https://${{ secrets.CROSS_REPO_TOKEN }}@github.com".insteadOf ssh://git@github.com
      #      - run: git config --global url."https://${{ secrets.CROSS_REPO_TOKEN }}@github.com".insteadOf https://github.com

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: type=raw,value={{branch}}-{{sha}}

      - uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true
          cache-targets: true

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          version: "25.x"

      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          targets: ${{ matrix.platform.target }}

      - name: cargo generate-lockfile
        # enable this ci template to run regardless of whether the lockfile is checked in or not
        if: hashFiles('Cargo.lock') == ''
        working-directory: mekadb
        run: cargo generate-lockfile

        #      - name: start opensearch
        #        run: docker compose up -d --wait
        #
        #      #it'll start before
        #      - name: Wait for Opensearch to start
        #        run: sleep 10

        #Use rustup target list to get full list of rust targets
        #docker:26.1.3-dind is available for amd64,arm64,arm/v6,arm/v7
        #See for linker export https://github.com/rust-lang/rust/issues/28924#issuecomment-580828030
      - name: build linux X86
        if: matrix.platform.os_name == 'Linux-x86_64'
        working-directory: mekadb
        #x86_64-unknown-linux-gnu is default on Ubuntu so no need to install it
        #rustup toolchain install ${{ matrix.toolchain }}-${{ matrix.platform.target }}
        run: |
          rustup show
          export RUSTFLAGS="-C target-feature=+crt-static"
          cargo build --release --package mekadbms --target ${{ matrix.platform.target }}

      - name: build linux ARM
        if: matrix.platform.os_name == 'Linux-aarch64'
        working-directory: mekadb
        #rustup toolchain install ${{ matrix.toolchain }}-${{ matrix.platform.target }}
        #x86_64-unknown-linux-gnu is default on Ubuntu so no need to install it
        run: |
          sudo apt-get install -y gcc-arm-linux* g++-arm-linux*
          which gcc-arm-linux-gnueabihf || true
          tree -fhDR /usr | grep 'arm'
          # ls -ahl /usr/bin/arm-linux-gnueabihf-gcc
          export CC=arm-linux-gnueabihf-gcc
          export CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER=/usr/bin/arm-linux-gnueabihf-gcc
          rustup target list
          rustup target add ${{ matrix.platform.target }}
          rustup show
          export RUSTFLAGS="-C target-feature=+crt-static"
          cargo build --release --package mekadbms --target ${{ matrix.platform.target }}

      - name: build mac ARM
#        rustup toolchain install ${{ matrix.toolchain }}-${{ matrix.platform.target }} && \
        if: matrix.platform.os_name == 'macOS-aarch64'
        working-directory: mekadb
        run: |
          set -e
          set -o xtrace
          rustup target list
          rustup target add ${{ matrix.platform.target }}
          rustup show && \
          cargo build --release --package mekadbms --target ${{ matrix.platform.target }}

      - name: build mac x86
#        rustup toolchain install ${{ matrix.toolchain }}-${{ matrix.platform.target }} && \
        if: matrix.platform.os_name == 'macOS-x86_64'
        working-directory: mekadb
        run: |
          set -e
          set -o xtrace
          rustup target list
          rustup target add ${{ matrix.platform.target }}
          rustup show && \
          cargo build --release --package mekadbms --target ${{ matrix.platform.target }}

        #https://github.com/aws/aws-lc/issues/1477
        #https://github.com/rustls/rustls/issues/1913
        #nasm isn't added to path so need to do it manually https://github.com/chocolatey/choco/issues/2794
        #https://aws.github.io/aws-lc-rs/requirements/windows.html
      #          set PATH="C:\Program Files\NASM;%PATH%"
      #          set AWS_LC_SYS_NO_ASM="true"
      - uses: ilammy/setup-nasm@v1
        if: matrix.platform.os_name == 'Windows-x86_64'
        #Use rustup target list to get full list of rust targets
        #docker:26.1.3-dind is available for amd64,arm64,arm/v6,arm/v7
        #See for linker export https://github.com/rust-lang/rust/issues/28924#issuecomment-580828030
      - name: build (windows)
        if: matrix.platform.os_name == 'Windows-x86_64'
        working-directory: mekadb
        run: |
          rustup toolchain install ${{ matrix.toolchain }}-${{ matrix.platform.target }}
          rustup show
          cargo build --release --package mekadbms --target ${{ matrix.platform.target }}

      - name: Rename binary (windows)
        if: matrix.platform.os_name == 'Windows-x86_64'
        working-directory: mekadb
        run: mv target/${{ matrix.platform.target }}/release/mekadbms.exe target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}

      - name: Rename binary (linux and macos)
        working-directory: mekadb
        if: matrix.platform.os_name != 'Windows-x86_64'
        run: mv target/${{ matrix.platform.target }}/release/mekadbms target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}

      - name: Generate SHA-256
        working-directory: mekadb
        run: shasum -a 256 target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }} | cut -d ' ' -f 1 > target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}.sha256

      - name: Show bins
        working-directory: mekadb
        run: tree -hDR target | grep 'mekadbms'

      - name: Release binary and SHA-256 checksum to GitHub
        #working-directory: mekadb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >-
            gh release upload ${{ steps.meta.outputs.version }}
            "mekadb/target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}#${{ matrix.platform.bin }}"
            "mekadb/target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}.sha256#${{ matrix.platform.bin }}.sha256"
            --clobber
